plugins {
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}
apply plugin: 'idea'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
buildConfig {
    version = project.version
    clsName = 'BuildConfig'
    packageName = 'com.thelogicmaster.robot_recharge'
    buildConfigField 'String', 'GAME_JOLT_KEY', properties.getProperty('gameJoltKey')
    buildConfigField 'boolean', 'DEBUG', properties.getProperty('debug') == null ? 'false' : properties.getProperty('debug')
}

configurations {
    lombok
}

dependencies {
    lombok 'org.projectlombok:lombok:1.18.16'
}

gwt {
    gwtVersion='2.8.2' // Should match the gwt version used for building the gwt backend
    maxHeapSize="1G" // Default 256m is not enough for gwt compiler. GWT is HUNGRY
    minHeapSize="1G"

    src = files(file("src/")) // Needs to be in front of "modules" below.
    modules 'com.thelogicmaster.robot_recharge.GdxDefinition'
    devModules 'com.thelogicmaster.robot_recharge.GdxDefinitionSuperdev'
    project.webAppDirName = 'webapp'

    compiler {
        strict = true;
        disableCastChecking = true;
    }
}

import org.wisepersist.gradle.plugins.gwt.GwtSuperDev
import org.akhikhl.gretty.AppBeforeIntegrationTestTask

gretty.httpPort = 8080
gretty.resourceBase = project.buildDir.path + "/gwt/draftOut"
gretty.contextPath = "/"
gretty.portPropertiesFileName = "TEMP_PORTS.properties"

task startHttpServer () {
    dependsOn draftCompileGwt

    doFirst {
        copy {
            from "webapp"
            into gretty.resourceBase
        }

        copy {
            from "war"
            into gretty.resourceBase
        }
    }
}

task beforeRun(type: AppBeforeIntegrationTestTask, dependsOn: startHttpServer) {
    // The next line allows ports to be reused instead of
    // needing a process to be manually terminated.
    file("build/TEMP_PORTS.properties").delete()
    // Somewhat of a hack; uses Gretty's support for wrapping a task in
    // a start and then stop of a Jetty server that serves files while
    // also running the SuperDev code server.
    integrationTestTask 'superDev'

    interactive false
}

task superDev (type: GwtSuperDev) {
    dependsOn startHttpServer
    doFirst {
        gwt.modules = gwt.devModules
        copy {
            from "../assets/blockly"
            into "build/gwt/draftOut/blockly"
        }
    }
}

task dist(dependsOn: [clean, compileGwt]) {
    doLast {
        file("build/dist").mkdirs()
        copy {
            from "build/gwt/out"
            into "build/dist"
        }
        copy {
            from "webapp"
            into "build/dist"
        }
        copy {
            from "war"
            into "build/dist"
        }
        copy {
            from "../assets/blockly"
            into "build/dist/blockly"
        }
    }
}

draftCompileGwt {
    doFirst {
        jvmArgs "-javaagent:${configurations.lombok.asPath}=ECJ"
    }
}

compileGwt {
    doFirst {
        jvmArgs "-javaagent:${configurations.lombok.asPath}=ECJ"
    }
}

task addSource {
    doLast {
        sourceSets.main.compileClasspath += files(project(':core').sourceSets.main.allJava.srcDirs)
    }
}

tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

eclipse.project.name = appName + "-html"
